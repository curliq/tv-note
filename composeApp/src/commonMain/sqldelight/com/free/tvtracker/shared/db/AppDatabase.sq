import com.android.build.gradle.internal.dsl.decorator.SupportedPropertyType.Var.Boolean;

CREATE TABLE stored_shows(
    tmdb_id INTEGER NOT NULL PRIMARY KEY,
    title TEXT NOT NULL,
    poster_image TEXT,
    backdrop_image TEXT,
    status TEXT NOT NULL
);

CREATE TABLE tracked_shows(
    id INTEGER NOT NULL PRIMARY KEY,
    created_at_datetime TEXT NOT NULL,
    stored_show INTEGER NOT NULL,
    watchlisted INTEGER AS Boolean DEFAULT 0,
    FOREIGN KEY (stored_show) REFERENCES stored_shows(tmdb_id) ON DELETE CASCADE
);

CREATE TABLE watched_episodes(
    id TEXT NOT NULL PRIMARY KEY,
    stored_episode_id INTEGER NOT NULL,
    tracked_show INTEGER NOT NULL,
    FOREIGN KEY (tracked_show) REFERENCES tracked_shows(id) ON DELETE CASCADE
);

CREATE TABLE stored_episodes(
    id INTEGER NOT NULL PRIMARY KEY,
    season INTEGER NOT NULL,
    episode INTEGER NOT NULL,
    stored_show INTEGER NOT NULL,
    air_date TEXT,
    FOREIGN KEY (stored_show) REFERENCES stored_shows(tmdb_id) ON DELETE CASCADE
);

CREATE TABLE episode_watched_order(
    id TEXT NOT NULL PRIMARY KEY,
    show_id INTEGER NOT NULL,
    stored_episode_id INTEGER NOT NULL
);

CREATE TABLE local_preferences(
    -- local session id to enforce only 1 row existing
    local_prefs_id INTEGER NOT NULL PRIMARY KEY,
    welcome_complete INTEGER AS Boolean DEFAULT 0,
    purchased_app INTEGER AS Boolean DEFAULT 0,
    is_hacked INTEGER AS Boolean DEFAULT 0,
    theme INTEGER DEFAULT 0
);

CREATE TABLE session(
    -- local session id to enforce only 1 row existing
    local_session_id INTEGER NOT NULL PRIMARY KEY,
    token TEXT NOT NULL,
    createdAtDatetime TEXT NOT NULL,
    user_id INTEGER NOT NULL,
    username TEXT,
    email TEXT,
    preferences_push_allowed INTEGER AS Boolean DEFAULT 1,
    is_anonymous INTEGER AS Boolean NOT NULL
);

selectAllTrackedShows:
SELECT *
FROM tracked_shows
JOIN stored_shows ON stored_shows.tmdb_id = tracked_shows.stored_show;

selectAllWatchedEpisodes:
SELECT *
FROM watched_episodes
WHERE watched_episodes.tracked_show = ?;

selectAllStoredEpisodes:
SELECT *
FROM stored_episodes
WHERE stored_episodes.stored_show = ?;

saveStoredShow:
INSERT INTO stored_shows(tmdb_id, title, poster_image, backdrop_image, status)
VALUES(?,?,?,?, ?)
ON CONFLICT(tmdb_id) DO UPDATE SET
title=excluded.title, poster_image=excluded.poster_image, backdrop_image=excluded.backdrop_image, status=excluded.status;

saveTrackedShow:
INSERT INTO tracked_shows(id, created_at_datetime, stored_show, watchlisted)
VALUES(?, ?, ?, ?)
ON CONFLICT(id) DO UPDATE SET
created_at_datetime=excluded.created_at_datetime, stored_show=excluded.stored_show, watchlisted=excluded.watchlisted;

deleteTrackedShow:
DELETE FROM tracked_shows
WHERE id=?;

saveWatchedEpisodes:
INSERT INTO watched_episodes(id, stored_episode_id, tracked_show)
VALUES(?,?,?)
ON CONFLICT(id) DO UPDATE SET
stored_episode_id=excluded.stored_episode_id, tracked_show=excluded.tracked_show;

saveStoredEpisodes:
INSERT INTO stored_episodes(id, season, episode, stored_show, air_date)
VALUES(?,?,?, ?, ?)
ON CONFLICT(id) DO UPDATE SET
season=excluded.season, episode=excluded.episode, stored_show=excluded.stored_show, air_date = excluded.air_date;

getWatchedEpisodeOrder:
SELECT *
FROM episode_watched_order;

saveWatchedEpisodeOrder:
INSERT INTO episode_watched_order(id, show_id, stored_episode_id)
VALUES(?,?,?);

deleteWatchedEpisodeOrder:
DELETE FROM episode_watched_order
WHERE id=?;

deleteWatchedEpisodeOrderForTvShow:
DELETE FROM episode_watched_order
WHERE show_id=?;

getLocalPreferences:
SELECT * FROM local_preferences;

saveLocalPreferences:
INSERT INTO local_preferences(local_prefs_id, welcome_complete, theme, purchased_app, is_hacked)
VALUES(?, ?, ?, ?, ?)
ON CONFLICT(local_prefs_id)
  DO UPDATE SET
  welcome_complete = excluded.welcome_complete,
  theme = excluded.theme,
  purchased_app = excluded.purchased_app,
  is_hacked = excluded.is_hacked;

getSession:
SELECT * FROM session;

saveSession:
INSERT INTO session(local_session_id, user_id, username, token, createdAtDatetime, email, preferences_push_allowed, is_anonymous)
VALUES(?, ?,?,?,?,?, ?, ?)
ON CONFLICT(local_session_id)
  DO UPDATE SET
  user_id = excluded.user_id,
  username = excluded.username,
  token = excluded.token,
  createdAtDatetime = excluded.createdAtDatetime,
  email = excluded.email,
  is_anonymous = excluded.is_anonymous,
  preferences_push_allowed = excluded.preferences_push_allowed;
